<html>

<head>
<meta charset="utf-8">
<meta name=Generator content="Microsoft Word 15 (filtered)">
<style>
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:"Calibri Light";
	panose-1:2 15 3 2 2 2 4 3 2 4;}
@font-face
	{font-family:Consolas;
	panose-1:2 11 6 9 2 2 4 3 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:8.0pt;
	margin-left:0cm;
	line-height:107%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
h1
	{mso-style-link:"Heading 1 Char";
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	line-height:107%;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:"Calibri Light",sans-serif;
	color:#2F5496;
	font-weight:normal;}
h2
	{mso-style-link:"Heading 2 Char";
	margin-top:2.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	line-height:107%;
	page-break-after:avoid;
	font-size:13.0pt;
	font-family:"Calibri Light",sans-serif;
	color:#2F5496;
	font-weight:normal;}
p.MsoToc1, li.MsoToc1, div.MsoToc1
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:5.0pt;
	margin-left:0cm;
	line-height:107%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoToc2, li.MsoToc2, div.MsoToc2
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:5.0pt;
	margin-left:11.0pt;
	line-height:107%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{mso-style-link:"Title Char";
	margin:0cm;
	font-size:28.0pt;
	font-family:"Calibri Light",sans-serif;
	letter-spacing:-.5pt;}
p.MsoTitleCxSpFirst, li.MsoTitleCxSpFirst, div.MsoTitleCxSpFirst
	{mso-style-link:"Title Char";
	margin:0cm;
	font-size:28.0pt;
	font-family:"Calibri Light",sans-serif;
	letter-spacing:-.5pt;}
p.MsoTitleCxSpMiddle, li.MsoTitleCxSpMiddle, div.MsoTitleCxSpMiddle
	{mso-style-link:"Title Char";
	margin:0cm;
	font-size:28.0pt;
	font-family:"Calibri Light",sans-serif;
	letter-spacing:-.5pt;}
p.MsoTitleCxSpLast, li.MsoTitleCxSpLast, div.MsoTitleCxSpLast
	{mso-style-link:"Title Char";
	margin:0cm;
	font-size:28.0pt;
	font-family:"Calibri Light",sans-serif;
	letter-spacing:-.5pt;}
a:link, span.MsoHyperlink
	{color:#0563C1;
	text-decoration:underline;}
p.MsoListParagraph, li.MsoListParagraph, div.MsoListParagraph
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:8.0pt;
	margin-left:36.0pt;
	line-height:107%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoListParagraphCxSpFirst, li.MsoListParagraphCxSpFirst, div.MsoListParagraphCxSpFirst
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:36.0pt;
	line-height:107%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoListParagraphCxSpMiddle, li.MsoListParagraphCxSpMiddle, div.MsoListParagraphCxSpMiddle
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:36.0pt;
	line-height:107%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoListParagraphCxSpLast, li.MsoListParagraphCxSpLast, div.MsoListParagraphCxSpLast
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:8.0pt;
	margin-left:36.0pt;
	line-height:107%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoTocHeading, li.MsoTocHeading, div.MsoTocHeading
	{margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	line-height:107%;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:"Calibri Light",sans-serif;
	color:#2F5496;}
span.TitleChar
	{mso-style-name:"Title Char";
	mso-style-link:Title;
	font-family:"Calibri Light",sans-serif;
	letter-spacing:-.5pt;}
span.Heading1Char
	{mso-style-name:"Heading 1 Char";
	mso-style-link:"Heading 1";
	font-family:"Calibri Light",sans-serif;
	color:#2F5496;}
p.code, li.code, div.code
	{mso-style-name:code;
	mso-style-link:"code Char";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:8.0pt;
	margin-left:0cm;
	line-height:107%;
	font-size:11.0pt;
	font-family:Consolas;}
span.codeChar
	{mso-style-name:"code Char";
	mso-style-link:code;
	font-family:Consolas;}
span.Heading2Char
	{mso-style-name:"Heading 2 Char";
	mso-style-link:"Heading 2";
	font-family:"Calibri Light",sans-serif;
	color:#2F5496;}
.MsoChpDefault
	{font-family:"Calibri",sans-serif;}
.MsoPapDefault
	{margin-bottom:8.0pt;
	line-height:107%;}
@page WordSection1
	{size:595.3pt 841.9pt;
	margin:72.0pt 54.0pt 72.0pt 54.0pt;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
</style>

</head>

<body lang=EN-GB link="#0563C1" vlink="#954F72" style='word-wrap:break-word'>

<div class=WordSection1>

<p class=MsoTitle>Blue Assistant User Manual</p>

<p class=MsoNormal>This manual contains instructions for setting up all the
components of blue assistant and integrating them into a final working product.
There will be links to pre-compiled and pre-packaged zip files that will
greatly simplify the setup process, but is not suitable for development.
Developers working on this project should follow the setup instructions in <span
class=codeChar>README.md</span> instead. </p>

<p class=MsoTocHeading><span lang=EN-US>In this manual:</span></p>

<p class=MsoToc1><a href="#_Toc67499211">Before you start<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></p>

<p class=MsoToc2><a href="#_Toc67499212">Agree to the Let’s Encrypt terms of
use<span style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></p>

<p class=MsoToc2><a href="#_Toc67499213">Hardware requirements<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></p>

<p class=MsoToc2><a href="#_Toc67499214">Prepare a domain name<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>2</span></a></p>

<p class=MsoToc2><a href="#_Toc67499215">Download resources<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>2</span></a></p>

<p class=MsoToc2><a href="#_Toc67499216">Install necessary software<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>2</span></a></p>

<p class=MsoToc2><a href="#_Toc67499217">Amazon account<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>2</span></a></p>

<p class=MsoToc2><a href="#_Toc67499218">Show file name extensions<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>2</span></a></p>

<p class=MsoToc1><a href="#_Toc67499219">Skill server setup<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>3</span></a></p>

<p class=MsoToc2><a href="#_Toc67499220">Setting up the cloud server<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>3</span></a></p>

<p class=MsoToc2><a href="#_Toc67499221">Setting the endpoint URL of your skill<span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></p>

<p class=MsoToc1><a href="#_Toc67499222">AVS client setup<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>5</span></a></p>

<p class=MsoToc2><a href="#_Toc67499223">Install runtime dependencies<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>5</span></a></p>

<p class=MsoToc2><a href="#_Toc67499224">Authorize the client<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>5</span></a></p>

<p class=MsoToc1><a href="#_Toc67499225">Unity client setup<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>6</span></a></p>

<p class=MsoToc1><a href="#_Toc67499226">Navigation configuration<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>6</span></a></p>

<p class=MsoToc2><a href="#_Toc67499227">Preparing floor plan image<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>6</span></a></p>

<p class=MsoToc2><a href="#_Toc67499228">Running the program<span
style='color:windowtext;display:none;text-decoration:none'>.. </span><span
style='color:windowtext;display:none;text-decoration:none'>7</span></a></p>

<p class=MsoToc2><a href="#_Toc67499229">Applying the floor plan to Unity<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>8</span></a></p>

<p class=MsoNormal>&nbsp;</p>

<h1><a name="_Toc67499211">Before you start</a></h1>

<h2><a name="_Toc67499212">Agree to the Let’s Encrypt terms of use</a></h2>

<p class=MsoNormal>The skill server setup and start-up scripts use Let’s
Encrypt to get https certificates for your cloud server. By using those
scripts, you acknowledge that you have read and agree to the Let’s Encrypt
usage policies, which can be found at <a
href="https://letsencrypt.org/repository/">https://letsencrypt.org/repository/</a>
.</p>

<h2><a name="_Toc67499213">Hardware requirements</a></h2>

<p class=MsoNormal>To run the Blue Assistant you would need a Windows 10
machine with sound and microphone. Face tracking feature also require a
front-facing webcam. You would also need a Debian-based Linux virtual machine
with a public IP address.</p>

<h2><a name="_Toc67499214">Prepare a domain name</a></h2>

<p class=MsoNormal>The skill server must have a publicly accessible domain
name. In this document we use “skill-server-install-test.mww.moe” as an
example.</p>

<h2><a name="_Toc67499215">Download resources</a></h2>

<p class=MsoListParagraphCxSpFirst style='text-indent:-18.0pt'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Clone the git repository on your Windows machine.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-18.0pt'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Download and extract <a
href="https://mw-public-data.s3.eu-west-2.amazonaws.com/e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855/avs.zip">https://mw-public-data.s3.eu-west-2.amazonaws.com/e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855/avs.zip</a>
into a new folder “avs”.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-18.0pt'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Download and extract <a
href="https://mw-public-data.s3.eu-west-2.amazonaws.com/e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855/unity-build.zip">https://mw-public-data.s3.eu-west-2.amazonaws.com/e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855/unity-build.zip</a>
into a new folder “unity-build”.</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-18.0pt'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Go to <a
href="https://www.java.com/en/download/windows_offline.jsp">https://www.java.com/en/download/windows_offline.jsp</a>
and download and install Java.</p>

<h2><a name="_Toc67499216">Install necessary software</a></h2>

<p class=MsoNormal>Firstly, remove any existing versions of python which you
have installed. Later versions of Python works as well but will require some
tinkering. </p>

<p class=MsoNormal>Run the two installers in the “AVSClientFiles” folder of the
git repository, which will install Python and MinGW (MSYS2), which will be used
by the AVS client. Note that:</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-18.0pt'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>When installing Python, you must select “Add Python 3.6 to PATH”:<br>
<img border=0 width=307 height=92 id="Picture 6"
src="user-manual_files/image001.png"
alt="Screenshot of the python install dialog, focusing on the &quot;Add Python 3.6 to PATH&quot; checkbox."></p>

<p class=MsoListParagraphCxSpLast style='text-indent:-18.0pt'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>When installing MinGW (MSYS2), you must install it to the default
location:<br>
<img border=0 width=405 height=77 id="Picture 7"
src="user-manual_files/image002.png"
alt="Graphical user interface, application&#10;&#10;Description automatically generated"></p>

<p class=MsoNormal>MinGW might also be useful for ssh-ing into your cloud
server, if you want to perform the skill server setup on Windows and do not
have another ssh client.</p>

<h2><a name="_Toc67499217">Amazon account</a></h2>

<p class=MsoNormal>You will need access to an Amazon account with administrator
rights to the Alexa skill.</p>

<h2><a name="_Toc67499218">Show file name extensions</a></h2>

<p class=MsoNormal>Since this document will be referring to files with their
extension, make sure this is checked:</p>

<p class=MsoNormal><img border=0 width=649 height=105 id="Picture 11"
src="user-manual_files/image003.jpg"></p>

<h1><a name="_Toc67499219">Skill server setup</a></h1>

<h2><a name="_Toc67499220">Setting up the cloud server</a></h2>

<p class=MsoNormal>First, check if you can ssh into your cloud server. You can
use the ssh command in the MinGW shell to do this if you are on Windows. Keep
this window open.</p>

<p class=MsoNormal><img border=0 width=650 height=147 id="Picture 1"
src="user-manual_files/image004.png"
alt="A screenshot of a Linux terminal, showing the execution of a simple ssh command."></p>

<p class=MsoNormal>Then, copy the “API-code” folder onto your server. In Linux
and MinGW, this can be done with the “scp” program. For example:</p>

<p class=code>scp -r API-code <i>your-server-domain</i>:.</p>

<p class=MsoNormal>will copy the API-code folder to your home directory on the
server.</p>

<p class=MsoNormal><img border=0 width=647 height=341 id="Picture 2"
src="user-manual_files/image005.png"
alt="A Linux terminal showing the result of the scp command."></p>

<p class=MsoNormal>Now, on the previous ssh window, run the following commands
to start the config script:</p>

<p class=code>cd API-code<br>
./configure.sh <i>your-server-domain</i></p>

<p class=MsoNormal><img border=0 width=634 height=190 id="Picture 3"
src="user-manual_files/image006.png"
alt="A Linux terminal showing the running of the above commands."></p>

<p class=MsoNormal>This might take a while, but your API server will be fully
ready after the script is finished, and the skill server will keep running even
if you close your ssh connection, and will also start up automatically when
your cloud server boots.</p>

<h2><a name="_Toc67499221">Setting the endpoint URL of your skill</a></h2>

<p class=MsoNormal>With your Amazon account logged-in, go to <a
href="https://developer.amazon.com/alexa/console/ask/">https://developer.amazon.com/alexa/console/ask/</a>
and click on your skill. Then, navigate to the “Endpoint” page:</p>

<p class=MsoNormal><img border=0 width=634 height=449 id="Picture 5"
src="user-manual_files/image007.jpg"></p>

<p class=MsoNormal>Make sure that “HTTPS” is selected, and under “Default
Region” enter “<span class=codeChar>https://<i>your-server-domain</i>/api/v1/blueassistant</span>”
and make sure “My development endpoint has a certificate from a trusted
certificate authority” is selected.</p>

<h1><a name="_Toc67499222">AVS client setup</a></h1>

<h2><a name="_Toc67499223">Install runtime dependencies</a></h2>

<p class=MsoNormal>Open the folder “AVSClientFiles” and locate the
“mingw-setup.sh” file. Open a MinGW window and drag-and-drop the file into it,
then press enter.</p>

<p class=MsoNormal>This process can take a very long time. You can close the
window after it’s done.</p>

<h2><a name="_Toc67499224">Authorize the client</a></h2>

<p class=MsoNormal>Run “startsample.bat” under your extracted “avs” folder.
Wait for a while, then scroll up until you see this:<img border=0 width=651
height=77 id="Picture 8" src="user-manual_files/image008.png"
alt="Graphical user interface, application&#10;&#10;Description automatically generated"></p>

<p class=MsoNormal>Copy the code, go to <a href="https://amazon.com/us/code">https://amazon.com/us/code</a>
and enter it (you might have to login to your Amazon account first). Click
“continue” on this page:</p>

<p class=MsoNormal><img border=0 width=657 height=417 id="Picture 9"
src="user-manual_files/image009.jpg"></p>

<p class=MsoNormal>If this is successful, you will then see this from your
client:</p>

<p class=MsoNormal><img border=0 width=303 height=132 id="Picture 10"
src="user-manual_files/image010.png"
alt="Graphical user interface, application&#10;&#10;Description automatically generated"></p>

<p class=MsoNormal>You can then close the client and your browser tab. Then,
run “startapp.bat”. After a while you should see two windows, one is the Alexa
client and another is the python bridge, which is used to connect the client
with Unity. These need to be kept open while running the unity client.</p>

<h1><a name="_Toc67499225">Unity client setup</a></h1>

<p class=MsoNormal>Open Avatar/ConfigGen/index.html in the git repository with
your browser, then follow the instruction. Do not check “Use test client”. Once
you’re done, click “Generate config.json” and save (copy) the file into the Avatar/avatar_Data
folder under your extracted “unity-build”, overriding the existing
“config.json”.</p>

<p class=MsoNormal>At this point all setup procedure has completed. If you have
kept the two windows spawned by the Alexa client earlier open, then simply run
“Avatar/Avatar.exe” under “unity-build” to run the assistant. In case you have
closed the Alexa client, run “startapp.bat” again to reopen.</p>

<p class=MsoNormal>You can use Alt+F4 to exit the unity client.</p>

<p class=MsoNormal><img border=0 width=649 height=365 id="Picture 12"
src="user-manual_files/image011.jpg"></p>

<h1><a name="_Toc67499226">Navigation configuration</a></h1>

<p class=MsoNormal>The assistant comes with a default set of rooms which you
can test by asking, for example, “(ask Blue Assistant) how to get to the
conference room”, without the need to do this configuration process. Nevertheless,
here are the steps to customize it to your building. </p>

<h2><a name="_Toc67499227">Preparing floor plan image</a></h2>

<p class=MsoNormal>Before running the configurator, you need to have a top view
image of each floor of the building (or each floor which contains some places
you want the user to be able to navigate). All the black pixels in the image
should represent walls, but it can otherwise contain other colours. An example
image suitable for this purpose is shown below:</p>

<p class=MsoNormal><img border=0 width=649 height=395 id="Picture 4"
src="user-manual_files/image012.jpg"></p>

<h2><a name="_Toc67499228">Running the program</a></h2>

<p class=MsoNormal>Run “Navigation/run.bat”, and click “upload” in the graphical
interface to select a floor image, then enter the floor number. It will hang
for a while to process the rooms, and then you shall see something like this:</p>

<p class=MsoNormal><img border=0 width=650 height=369 id="Picture 13"
src="user-manual_files/image013.jpg"></p>

<p class=MsoNormal>The program will iterate through all the rooms and highlight
one at a time. You should give a name for each room. It will also highlight the
hallway and lift area, and you must press “Hall” or “Lift” for those. Each
floor must have exactly one Hall and exactly one Lift. At the end of this,
click “Upload another” to repeat this process for another floor, or “Quit” to
finish off.</p>

<p class=MsoNormal>After you click “Quit”, please wait for the command window
to close before continuing with…</p>

<h2><a name="_Toc67499229">Applying the floor plan to Unity</a></h2>

<p class=MsoNormal>Copy the entire “Navigation” folder to the “unity-build”
folder, overriding any existing files. Afterward the unity client should be
able to show video of the new floor plan.</p>

<h2>Applying the floor plan on the skill server</h2>

<p class=MsoNormal>You would also need to change the skill server in order for
the Alexa skill to recognize any queries for the rooms you created. For this
you would need to manually edit the JSON files in the API-code folder of the
repository and re-deploy the skill server (just <span class=codeChar>scp</span>
the files again and run <span class=codeChar>sudo systemctl restart
skill-backend</span>). Follow the instructions in Navigation/README.md for how
to modify the JSON files.</p>

</div>

</body>

</html>
